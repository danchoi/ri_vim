

rvm docs generate-ri


------------------------------------------------------------------------
Sun Jul  3 16:36:47 EDT 2011

done:
- for dropdown: find all symbols for a class
- method search? find all classes that implement a method


to do:
- for dropdown: all classes


UI:

  There should be one universal search box

  If the user enters a capital letter, we search for Clsas

  If the user enters a lower case letter, we search for method
  - Then the user picks a classname, then we look that up

  Least important is searching for symbols in a class. There will usually be a
  class intro somewhere.

  Maybe check for .comment


If searching for method, don't autocomplete at first

ENTER to submit query, then autocomplete to select from the resutling matches?


Example of method search:

[choi kaja~/p/vim-ri]$ ruby -Ilib rivim.rb task



Need ability to jump up to parent


[choi kaja~/p/vim-ri]$ ruby -Ilib rivim.rb Sequel::Model

Sequel::Model
Sequel::Model::Associations
Sequel::Model::Associations::AssociationDatasetMethods
Sequel::Model::Associations::AssociationReflection
Sequel::Model::Associations::ClassMethods
Sequel::Model::Associations::DatasetMethods

- need to tab complete each nesting of namespace


Almost done:

# for command line tool?

  Mabye put a period at the end if a class to look up exact name
  And if there is a method appended to a class, we can know it is an exact lookup

  - no, its easier just to use a flag


other possible tasks:
- vimscript: incremental autoocomplete with nested modules
- jump up to parent from a document
- syntax highlighting rdoc
- jump to line in code?
- open rdoc html page
- launch a google search
- search stack overflow
- dependency on a certain version of RDoc!; use 'gem' to load a specific version
- indicate if there is actually some documentation on a method or class
- keep a history of recently seen? or bookmarks?

I wonder if ri is fast enough to autocomplete the method matches


NEXT:

- see if we can get path to source
  - also make sure we can get READMEs
- Start writing VimScript

LOWER PRIORITY
- flag by whether there is documentation



TODO

I played around with the prototype and am getting a better feel for it

1. need an indicator of what has actual commentary
2. on a class page, search for an instance or class Method
  with an extended autocomplete
  e.g. 
  = ActionView::Helpers::NumberHelper#nu... c-x c-u

  use \. for Class method, easier to detect than :: which is used for module name sep

if a method name without a class, don't allow entering, revie the last autocomplete

3. rdoc partial syntax highlighting


PRIORITY
- find READMEs
- find standard Library rdoc => done, need patch, ask rdoc maintainer to patch
- CTRL-O, CTRL-I
- jump from method at bottom to class list to doc -> should be simple


Got standard library ri docs generated. Bug in rdoc gem
/home/choi/.rvm/gems/ruby-1.9.2-p180/gems/rdoc-3.6.1/lib/rdoc/options.rb:234:    # D CHOI

OK discovered that autocomplete can actually show a DEFINITION
  though I'm not sure I want to use this.

  Try maybe you want 

should restore the direct method search

- encourage internal rdoc generation for internal projects 
  - that means that e.g. much of a consulting rails project should be pushed
    down into a gem

- TODO
  To search readmes, try a different approach. Just let use search not by Ruby name, but 
  by gem name, which is like 'activerecord". This is simpler to implement

Syntax highlight
= heading
== heading
<tt></tt>
<em></em>
options
  :invalid :
- instance method and class method names

fix indent of paragraph?


Good screen shot examples
- String#encode

I think for RDoc history, we also need the last line number so we can jump to it


NEXT 
- some syntax higlighting
- remember to note in doc that TAB is equal to C-X C-u
- bookmarks? (LATER)
- readmes
- straight to gem code

I think I should do other work, chip away at this gradually, then release on
Thurs or next Mon


* I think I should save the docs as files in a cache, then I get vim jumplist 
functionality for free. No need to do message history tracking implementation


- instead of cWORD check against a regex so we can cursor over <tt>lkawjdlak


The Rdoc fo IO::pipe is messed up. Text is missing. Compare to original source

~/.rvm/src/ruby-1.9.2-p180/io.c


~/.rvm/src/rvm/scripts/docs

  this genreates the rdocs

Something is definitely wrong with the ri generator!

Compare the darkfish html output of String#scan with the ri 

stuff is missing the the stuff in the code example


OK fixed the problem of the missing stuff: solution was to use 
    
    gem 'rdoc' 

at top

TODO. Almost there. Remaining:
  chdir to gem dir (user can readme from there?)
  open rdoc html
  ERB plugin install
  Documentation/ homepage
  - vertical/horizonal ri window modes


BUG
- Time is missing instance and class methods -- why?

Use 7.3 conceal feature
  :help conceal

http://b4winckler.wordpress.com/2010/08/07/using-the-conceal-vim-feature-with-latex/

LATER

  File: autocomplet to File::URI and ret throws error. I think it involves
  method names that start with caps


TODO
  - open corresponding rdoc (the rvm docs open only opens the ruby library rdocs, not the gem rdocs)
  - cd into gem directory


  ,r
  ,R  - splits vertically


